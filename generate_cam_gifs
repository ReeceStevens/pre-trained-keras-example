#!/bin/bash

# create_cam_gif <model> <character> <npz_file>
function create_cam_gif() {
    final_gif_name="../data_dir/cam_output/$1/$2/$3/$2_$3.gif"
    mkdir -p ../data_dir/cam_output/$1/$2/$3
    CUDA_VISIBLE_DEVICES='' DISPLAY=:2 python cam_animation.py --weight-directory ../data_dir/weights/$1 --data-directory ../data_dir/simpsons_dataset --image-path ../data_dir/simpsons_dataset/$2/$3 --cam-path ../data_dir/cam_output/$1/$2/$3 --weight-limit 100
    convert -delay 30  -size 256x256 ../data_dir/cam_output/$1/$2/$3/*.png -loop 0 $final_gif_name
}

function create_cam_frame() {
    model=$1
    character=$2
    file=$3
    weight_file=$4
    CUDA_VISIBLE_DEVICES='' DISPLAY=:2 python cam_animation.py --weight-file $weight_file --data-directory ../data_dir/simpsons_dataset --image-path ../data_dir/simpsons_dataset/$character/$file --cam-path ../data_dir/cam_output/$model/$character/$file

}

max_jobs=20

if [[ $# == 3 ]]; then
    create_cam_gif $@
elif [[ $# == 2 ]]; then
    model=$1
    character=$2
    for file in ../data_dir/simpsons_dataset/$character/*.npz
    do
        filename=$(basename $file)
        if [[ -f $file ]]; then
            for weight in ../data_dir/weights/$model/*.h5
            do
                if [[ -f $weight ]]; then
                    while [ $(jobs | wc -l) -ge $max_jobs ]; do sleep 1; done
                    echo "create_cam_frame $model $character $filename $weight &"
                    create_cam_frame $model $character $filename $weight &
                fi
            done
            wait
            final_gif_name="../data_dir/cam_output/$model/$character/$filename/$character_$filename.gif"
            convert -delay 30  -size 256x256 ../data_dir/cam_output/$model/$character/$filename/*.png -loop 0 $final_gif_name
        fi
        echo "Completed CAM generation for $character/$file"
    done
else
    echo "./generate_cam_gifs <model> <character> <npz_file>"
fi
